<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AI メンター - 未踏ジュニア</title>
  <style>
    .hidden {
      display: none;
    }
    textarea, #result {
      width: 100%;
      box-sizing: border-box;
    }
    textarea {
      height: 150px;
    }
    #result {
      height: 100%;
      border: 1px solid #ccc;
      padding: 10px;
      padding-bottom: 2em;
      overflow-y: scroll;
      margin-top: 10px;
      position: relative;
    }
    #thinking-animation {
      position: absolute;
      top: 50%;
      left: 0;
      transform: translateY(-50%);
    }

    #result-placeholder {
      color: #888;
    }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/markdown-it/dist/markdown-it.min.js"></script>
</head>
<body>
  <form id="chat-form">
    <textarea id="input-text" name="input_text" required placeholder="提案書の概要を入力してください（上限：500文字）" maxlength="500"></textarea>
    <button type="submit" id="submit-btn">AI に提案書の文章を見てもらう</button>
    <button type="button" id="sample-text-btn">サンプル文章を入力する</button>
    <span id="char-count">0</span>/500
  </form>
  <div id="result"><span id="result-placeholder">ココに AI の回答が表示されます</span></div>
  <div id="thinking-animation" style="display: none; margin-top: 0em; margin-bottom: 0; margin-left: 1em;">AI が回答を考えています<span id="dots"></span>
  </div>

  <script>
    const sampleTexts = [
      "自宅で手軽に筋トレができるVRソフトです。VRゴーグルを装着し、椅子などを補助に利用し、自分の体重(自重)でトレーニングができます。激しく動く有酸素運動とは逆で、この3部作は美しい映像と音楽に包まれてリラックスしながらゆっくり動くワークアウトなので幅広い年代の方の運動能力、基礎体力の向上、健康維持に役立ちます。省スペースでもあります。",
      "逆方向に動く2つのキューブを同時にゴールに持っていく、シンプルなパズルゲームです。ルールの簡単さに対し、実は非常に頭をつかうゲームで、論理力の育成に役立ちます。現行のバージョンをゲームデザインを中心に改良し、老若男女問わず幅広い層に受け入れられるような、リリースが可能なレベルのゲームにする事が目標です。",
      "編模様は編み物を支援するツールです。編み物の本などは、モノクロで図も小さく自分の考えた絵では編むことはできません。そこで自分の描いたイラストを編もうとすると方眼紙にイラストを描いてそれを数えながら編んでいくので気が遠くなるほどのの手間がかかります。編模様は自分で描いた絵を編み図にカラーで変換し、色が変わるまでの数などを表示し編み間違いを減らし、オリジナルの作品を効率的に作れるようにします。",
      "DetExploit は WMI (Windows Management Instrumentation)やレジストリなどを参照することによって取得したシステム上のアプリケーションの情報と様々なデータベースから取得した情報を照合することによってセキュリティ的に脆弱なソフトウェアを検知し、ユーザーに通知するソフトウェアです。",
      "「Visible」はNode.jsで開発されるオープンソースのWebアクセシビリティーテストツールです。WebサイトのURLやソースコードからアクセシビリティー上の問題点を検出するほか、アルゴリズムや機械学習プラットフォームを有効活用して修正を提案します。",
      "Mer はリコーダーを基にして、色々な機能を搭載したウィンドシンセサイザーです。発音が簡単なので初心者でも完成度の高い演奏を体験できますし、自然な呼吸を応用して演奏するので健康に良いです。更に、サミング奏法とオクターブジャンプ奏法で高速かつ正確な演奏ができます。加えて、MIDI 出力ができるので、ユーザーの好きな音源で演奏できます。また、運指や息の感度を変更したり、アルペジオを割り当てたりできます。"
    ];

    document.getElementById("sample-text-btn").onclick = function() {
      const randomIndex = Math.floor(Math.random() * sampleTexts.length);
      document.getElementById("input-text").value = sampleTexts[randomIndex];
      updateCharCount();
    };

    const md = window.markdownit();
    let dotAnimation;

    function updateDots() {
      const dots = document.getElementById("dots");
      dots.textContent = dots.textContent.length < 3 ? dots.textContent + '.' : '';
    }

    document.getElementById("chat-form").addEventListener("submit", async (event) => {
      event.preventDefault();
      const inputText = document.getElementById("input-text").value;
      const resultDiv = document.getElementById("result");
      const thinkingAnimation = document.getElementById("thinking-animation");
      const submitBtn = document.getElementById("submit-btn");

      // Clear output screen if there's content
      resultDiv.innerHTML = '<span id="result-placeholder">ココに AI の回答が表示されます</span>';

      // Show "AI is thinking" animation
      thinkingAnimation.style.display = 'block';
      dotAnimation = setInterval(updateDots, 500);
      submitBtn.disabled = true;

      // Send request and display ChatGPT response
      const response = await fetch('/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: new URLSearchParams({ input_text: inputText })
      });
      const data = await response.json();

      // Hide "AI is thinking" animation
      clearInterval(dotAnimation);
      thinkingAnimation.style.display = 'none';
      submitBtn.disabled = false;

      // Convert Markdown to HTML and display
      resultDiv.innerHTML = md.render(data.response);
    });

    const charCount = document.getElementById("char-count");
    const inputTextArea = document.getElementById("input-text");
    
    inputTextArea.addEventListener("input", updateCharCount);

    function updateCharCount() {
      charCount.textContent = inputTextArea.value.length;
    }
  </script>
</body>
</html>
