<ul>
  <li><a href='https://jr.mitou.org/download' target='_blank' rel='noopener'>未踏ジュニア提案書</a>の概要文 (200文字以内) に <a href='https://twitter.com/hashtag/ChatGPT' target='_blank' rel='noopener'>#ChatGPT</a> がコメントする実験的なシステムです。<br class='ignore-pc'><small>(※ コメントの「正しさ」が保証されず、場合によっては改悪になる可能性もあるため、非公式のツールです)</small></li>
  <li><a href='https://twitter.com/hashtag/ChatGPT' target='_blank' rel='noopener'>#ChatGPT</a> の機能を大幅に制限しています。<a href='https://chat.openai.com/chat' target='_blank' rel='noopener'>OpenAI アカウントを作る</a>と制限無しで使えます。<br class='ignore-pc'><small>(※ <a href='https://openai.com/policies/terms-of-use#:~:text=You%20must%20be%20at%20least%2013%20years%20old%20to%20use%20the%20Services.%20If%20you%20are%20under%2018%20you%20must%20have%20your%20parent%20or%20legal%20guardian%E2%80%99s%20permission%20to%20use%20the%20Services.' target='_blank' rel='noopener'>OpenAI の利用規約</a>に基づき保護者から許可を取る、もしくは保護者が代わりにご利用ください)</small>      </li>
  <li>タイトルについては「<a href='https://zenn.dev/reputeless/articles/idea-mitoujr' target='_blank' rel='noopener'>未踏ジュニア、伝わる提案書を作る 5 つのコツ</a>」をお読みください。</li>
</ul>

<textarea id="inputText" rows="8" cols="80" maxlength="200" placeholder="提案書の概要文を入力してください&#10;（上限：200文字）"></textarea><br>
<button id="submitButton">AI に概要文を見てもらう</button>
<button id="sampleButton">サンプル概要文を入力する</button>
<span id="inputLength">0</span> / 200
<div id="result"><span id='result-placeholder'>ココに AI のコメントが表示されます</span></div>
<div class="loader" style="display: none;"></div>

<div id="reaction-buttons" style="display: none;">
  <span>この回答はお役に立ちましたか？</span>
v  <button id="positiveReaction" onclick="sendReaction('up')">👍</button>
  <button id="negativeReaction" onclick="sendReaction('down')">👎</button>
    </p>
</div>

<script>
 let reactionSubmitted = false;
 function sendReaction(reaction) {
   fetch('/reaction', {
     method: 'POST',
     headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
     //headers: { 'Content-Type': 'application/json' },
     body: new URLSearchParams({ reaction: reaction })
     //body: JSON.stringify({ reaction: reaction })
   }).then(response => {
     if (response.ok) {
       //console.log(`リアクション: ${reaction}`);
       reactionSubmitted = true;
       disableReactionButtons();
     } else {
       console.error('リアクションの送信に失敗しました');
     }
   });
 }
 
 // These texts come from published samples here:
 // https://jr.mitou.org/download#sample
 const sampleTexts = [
   "自宅で手軽に筋トレができるVRソフトです。VRゴーグルを装着し、椅子などを補助に利用し、自分の体重(自重)でトレーニングができます。激しく動く有酸素運動とは逆で、この3部作は美しい映像と音楽に包まれてリラックスしながらゆっくり動くワークアウトなので幅広い年代の方の運動能力、基礎体力の向上、健康維持に役立ちます。省スペースでもあります。",
   "逆方向に動く2つのキューブを同時にゴールに持っていく、シンプルなパズルゲームです。ルールの簡単さに対し、実は非常に頭をつかうゲームで、論理力の育成に役立ちます。現行のバージョンをゲームデザインを中心に改良し、老若男女問わず幅広い層に受け入れられるような、リリースが可能なレベルのゲームにする事が目標です。",
   "編模様は編み物を支援するツールです。編み物の本などは、モノクロで図も小さく自分の考えた絵では編むことはできません。そこで自分の描いたイラストを編もうとすると方眼紙にイラストを描いてそれを数えながら編んでいくので気が遠くなるほどのの手間がかかります。編模様は自分で描いた絵を編み図にカラーで変換し、色が変わるまでの数などを表示し編み間違いを減らし、オリジナルの作品を効率的に作れるようにします。",
   "DetExploit は WMI (Windows Management Instrumentation)やレジストリなどを参照することによって取得したシステム上のアプリケーションの情報と様々なデータベースから取得した情報を照合することによってセキュリティ的に脆弱なソフトウェアを検知し、ユーザーに通知するソフトウェアです。",
   "「Visible」はNode.jsで開発されるオープンソースのWebアクセシビリティーテストツールです。WebサイトのURLやソースコードからアクセシビリティー上の問題点を検出するほか、アルゴリズムや機械学習プラットフォームを有効活用して修正を提案します。",
   "Merはリコーダーを基にして、色々な機能を搭載したウィンドシンセサイザーです。発音が簡単なので初心者でも完成度の高い演奏を体験できますし、自然な呼吸を応用して演奏するので健康に良いです。更に、サミング奏法とオクターブジャンプ奏法で高速かつ正確な演奏ができます。加えて、MIDI出力ができるので、ユーザーの好きな音源で演奏できます。また、運指や息の感度を変更したり、アルペジオを割り当てたりできます。"
 ];

 function setInputText(text) {
   const inputText = document.getElementById("inputText");
   inputText.value = text;
   updateInputLength();
 }

 function updateInputLength() {
   const inputText   = document.getElementById("inputText");
   const inputLength = document.getElementById("inputLength");
   inputLength.textContent = inputText.value.length;
 }

 document.getElementById("inputText").addEventListener("input_text", updateInputLength);

 document.getElementById("sampleButton").onclick = function() {
   const randomIndex = Math.floor(Math.random() * sampleTexts.length);
   setInputText(sampleTexts[randomIndex]);
 };

 function showThinkingAnimation() {
   const resultDiv = document.getElementById("result");
   resultDiv.innerHTML = '<div class="loader"></div><p>AI がコメントを考えています...</p>';
 }
 function hideThinkingAnimation() {
   const resultDiv = document.getElementById("result");
   //resultDiv.innerHTML = 'ココに AI のコメントが表示されます';
 }
 function showReactionButtons() {
   document.getElementById("reaction-buttons").style.display = "block";
 }
 function hideReactionButtons() {
   document.getElementById("reaction-buttons").style.display = "none";
 }
 function activateReactionButtons() {
   document.getElementById('positiveReaction').disabled = false;
   document.getElementById('negativeReaction').disabled = false;
 }
 function disableReactionButtons() {
   document.getElementById('positiveReaction').disabled = true;
   document.getElementById('negativeReaction').disabled = true;
 }

 const md = window.markdownit();
 let dotAnimation;

 document.getElementById("submitButton").onclick = async function() {
   const inputText = document.getElementById("inputText").value;
   //if (inputText.length === 0 || inputText.length > 500) {
   //  return;
   //}
   this.disabled = true;
   showThinkingAnimation();
   hideReactionButtons();

   // APIリクエストを行う処理をここに追加してください。
   // Send request and display ChatGPT response
   const response = await fetch('/gpt', {
     method: 'POST',
     headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
     body: new URLSearchParams({ input_text: inputText })
   });
   const data = await response.json();
   activateReactionButtons();

   // APIリクエストが完了したら、次のようにコメントを表示します。
   const resultDiv = document.getElementById("result");
   resultDiv.innerHTML = md.render(data.response); // Convert Markdown to HTML and display

   this.disabled = false;
   hideThinkingAnimation();
   showReactionButtons();
 };

 const inputText = document.getElementById('inputText');
 const charCount = document.getElementById('inputLength');

 // 入力画面の内容が変更されるたびに文字数を更新する関数
 function updateCharCount() {
   charCount.innerText = inputText.value.length;
 }

 // 入力画面の内容が変更されたときに updateCharCount 関数を実行
 inputText.addEventListener('input', updateCharCount);

 // 初期の文字数を設定
 updateCharCount();
</script>
